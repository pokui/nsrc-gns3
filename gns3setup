#!/bin/bash

#
# This script configures the NSRC GNS3 training platform
# See: https://shell.nsrc.org/~vtp/gns3/docs/
#

set -eu
set -o pipefail

if [ "$(id -u)" = "0" ]; then
  echo "This script must be run as the user you intend to run gns3 as, not as root"
  exit 1
fi

# This is the last octet of the IP address.
# Override via environment or gns3setup.conf if building a second server.
: "${IP_OFFSET:=1}"

if [ -r gns3setup.conf ]; then
  source gns3setup.conf
fi

USER="$(id -un)"
GROUP="$(id -gn)"
MODS=""

#
# Helper script to install a new file only if it has changed
# Exit code 126 if result was OK but change was made
#
REPLACE () {
  src="${1}.new"
  dst="${1}"
  sudo="${2:-}"
  $sudo tee "${src}" >/dev/null || return $?
  if $sudo cmp -s "$dst" "$src" 2>/dev/null; then
    $sudo rm "$src"
  elif [ "${DRY_RUN:-N}" = "Y" ]; then
    $sudo test -f "$dst" && $sudo diff -u "$dst" "$src"
    $sudo rm "$src"
  else
    $sudo test -f "$dst" && $sudo ln "$dst" "${dst}.bak" || true
    echo "REPLACING: $dst"
    $sudo mv "$src" "$dst" || return $?
    return 126
  fi
}

IF_CHANGED () {
  rc="$?"
  if [ "$rc" -eq 0 ]; then
    return
  elif [ "$rc" -eq 126 ]; then
    echo "$@"
    eval "$@"
  else
    echo "Command terminated with exit code $rc"
    exit "$rc"
  fi
}

CHMOD () {
  [ "${DRY_RUN:-N}" = "Y" ] && return
  chmod "$@"
}

SUDO_CHMOD () {
  [ "${DRY_RUN:-N}" = "Y" ] && return
  sudo chmod "$@"
}

#
# Configure grub (disable Spectre/Meltdown mitigations)
#
MODS="$MODS grub"
conf_grub () {
  if egrep '^GRUB_CMDLINE_LINUX.*mitigations=off' /etc/default/grub >/dev/null; then
    echo "Not changing /etc/default/grub"
    return
  fi
  (
egrep -v '^(GRUB_CMDLINE_LINUX=|GRUB_DISABLE_OS_PROBER=|GRUB_RECORDFAIL_TIMEOUT=|# gns3setup)' /etc/default/grub
cat <<EOS
# gns3setup
GRUB_CMDLINE_LINUX="mitigations=off nomodeset"
GRUB_DISABLE_OS_PROBER=true
GRUB_RECORDFAIL_TIMEOUT=2
EOS
  ) | REPLACE /etc/default/grub sudo || IF_CHANGED sudo update-grub
}

#
# Configure sshd security (disallow password logins except from LAN)
#
MODS="$MODS sshd"
conf_sshd () {
  (
egrep -v '^(PasswordAuthentication |ChallengeResponseAuthentication |Match Address |# gns3setup)' /etc/ssh/sshd_config
cat <<EOS
# gns3setup
PasswordAuthentication no
ChallengeResponseAuthentication no
# gns3setup: allow PasswordAuthentication from trusted networks only
Match Address 100.64.0.0/10,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16,2001:db8::/32,fc00::/7${TRUSTED_EXTERNAL_NETWORK:+,}${TRUSTED_EXTERNAL_NETWORK:-}${IPV6_PREFIX:+,}${IPV6_PREFIX:-}${IPV6_PREFIX:+/64}
PasswordAuthentication yes
EOS
  ) | REPLACE /etc/ssh/sshd_config sudo || IF_CHANGED sudo systemctl restart ssh
}

#
# Configure ssh (don't hash known hosts)
#
MODS="$MODS ssh"
conf_ssh () {
  (
egrep -v '^( *HashKnownHosts |# gns3setup)' /etc/ssh/ssh_config
cat <<EOS
# gns3setup
    HashKnownHosts no
EOS
  ) | REPLACE /etc/ssh/ssh_config sudo || IF_CHANGED
}

#
# Configure sudo (don't do DNS lookups)
#
MODS="$MODS sudo"
conf_sudo () {
  (
cat <<EOS
# Prevent sudo doing DNS queries, so it doesn't timeout when DNS is down
Defaults !fqdn
EOS
  ) | REPLACE /etc/sudoers.d/nofqdn sudo || IF_CHANGED
}

#
# Configure time (ensure ntp sync)
#
MODS="$MODS time"
conf_time () {
  [ -f /etc/ntp.conf ] && return
  sudo timedatectl set-ntp on
}

#
# Configure apt repositories
#
MODS="$MODS apt"
conf_apt () {
  sudo add-apt-repository -y ppa:gns3/ppa

  curl -Ss https://syncthing.net/release-key.txt | sudo apt-key add -
  echo "deb https://apt.syncthing.net/ syncthing stable" | sudo tee /etc/apt/sources.list.d/syncthing.list

  sudo apt-get update
}

#
# Configure libvirt
#
MODS="$MODS libvirt"
conf_libvirt () {
  sudo apt-get install -y libvirt-daemon-system bridge-utils
  sudo usermod -a -G kvm,libvirt "$USER"
}

#
# Configure kvm (disable halt-polling)
#
MODS="$MODS kvm"
conf_kvm () {
  (
egrep -v '^(options kvm |# gns3setup)' /etc/modprobe.d/qemu-system-x86.conf 2>/dev/null || true
cat <<EOS
# gns3setup
options kvm halt_poll_ns=0
EOS
  ) | REPLACE /etc/modprobe.d/qemu-system-x86.conf sudo || IF_CHANGED
}

MODS="$MODS network"
conf_network () {
  # Prompt for interfaces unless already specified in environment
  if [ -z "${WAN_INTERFACE:-}" -o -z "${LAN_INTERFACE:-}" ]; then
    readarray -t INTERFACES < <(find /sys/class/net -type l -not -lname '*virtual*' -printf '%f\n' | sort)
    echo "The following network interfaces were found:"
    echo ${INTERFACES[@]}
    echo
    # Rough and ready: eno comes before enx, and enx before wlp
    # So assume first one is LAN, second is WAN, third is WIFI
    if [ -z "${INTERFACES[1]:-}" ]; then
      # Single interface: no LAN, only WAN
      INTERFACES[1]="${INTERFACES[0]:-none}"
      INTERFACES[0]="none"
    fi
    echo "Please select, or hit enter to accept default (enter 'none' for no connection)"
    read -p "LAN interface [${INTERFACES[0]}]: " LAN_INTERFACE
    [ -z "$LAN_INTERFACE" ] && LAN_INTERFACE="${INTERFACES[0]}"
    read -p "WAN interface [${INTERFACES[1]}]: " WAN_INTERFACE
    [ -z "$WAN_INTERFACE" ] && WAN_INTERFACE="${INTERFACES[1]}"
  fi

  # Libvirt networking (virbr0)
  (
cat <<EOS
<!--
WARNING: THIS IS AN AUTO-GENERATED FILE. CHANGES TO IT ARE LIKELY TO BE
OVERWRITTEN AND LOST. Changes to this xml configuration should be made using:
  virsh net-edit default
or other application using the libvirt API.
-->

<network>
  <name>default</name>
EOS
    sudo egrep '<uuid>' /etc/libvirt/qemu/networks/default.xml
cat <<EOS
  <forward mode='nat'/>
  <bridge name='virbr0' stp='off' delay='0'/>
EOS
    sudo egrep '<mac address=' /etc/libvirt/qemu/networks/default.xml
cat <<EOS
  <domain name='ws.nsrc.org' localOnly='yes'/>
  <ip address='100.64.0.${IP_OFFSET}' netmask='255.255.252.0' localPtr='yes'>
EOS
[ "$IP_OFFSET" = "1" ] && cat <<EOS
    <dhcp>
      <range start='100.64.1.0' end='100.64.3.254'/>
    </dhcp>
EOS
cat <<EOS
  </ip>
  <ip family='ipv6' address='fe80::${IP_OFFSET}' prefix='64'>
  </ip>
EOS
if [ -n "${IPV6_PREFIX:-}" ]; then
  cat <<EOS
  <ip family='ipv6' address='${IPV6_PREFIX}::1' prefix='64'>
    <dhcp>
      <range start='${IPV6_PREFIX}::1000' end='${IPV6_PREFIX}::ffff'/>
    </dhcp>
  </ip>
EOS
fi
cat <<EOS
  <route address='100.64.0.0' prefix='10' gateway='100.64.0.254'/>
  <route family='ipv6' address='2001:db8::' prefix='32' gateway='fe80::254'/>
  <route family='ipv6' address='2001:10::' prefix='28' gateway='fe80::254'/>
</network>
EOS
  ) | REPLACE /etc/libvirt/qemu/networks/default.xml sudo || IF_CHANGED NETWORK_CHANGED="Y"

  # WAN interface via netplan.  "none" means leave as-is.
  if [ "${WAN_INTERFACE}" != "none" ]; then
    # Remove any existing netplan config
    if [ "${DRY_RUN:-N}" != "Y" ]; then
      for f in /etc/netplan/*.yaml /etc/netplan/*.yml; do
        [ -f "$f" ] && ! egrep "# gns3setup" "$f" >/dev/null && sudo mv "$f" "${f}.disabled"
      done
    fi

    if [ -d "/etc/cloud/cloud.cfg.d" -a ! -f "/etc/cloud/cloud.cfg.d/subiquity-disable-cloudinit-networking.cfg" ]; then
      (
cat <<EOS
# gns3setup
network: {config: disabled}
EOS
      ) | REPLACE /etc/cloud/cloud.cfg.d/99-disable-network-config.cfg sudo || IF_CHANGED
    fi

    (
cat <<EOS
# gns3setup
network:
  version: 2
  ethernets:
    $WAN_INTERFACE:
      dhcp4: true
      optional: true
      # For static WAN IP address, change 'dhcp4: true' to 'false' above,
      # and uncomment/update the following lines
      #addresses: [192.0.2.2/24]
      #gateway4: 192.0.2.1
      #nameservers:
      #  search: [ws.nsrc.org]
      #  addresses: [8.8.8.8, 8.8.4.4]
EOS
    ) | REPLACE /etc/netplan/10-wan.yaml sudo || IF_CHANGED NETWORK_CHANGED="Y"

    (
cat <<EOS
#!/bin/bash -eu
# https://superuser.com/questions/1208952/qemu-kvm-libvirt-forwarding
if [ "\$IFACE" = "$WAN_INTERFACE" ]; then
  sysctl net.ipv6.conf.$WAN_INTERFACE.accept_ra=2
fi
EOS
    ) | REPLACE /etc/networkd-dispatcher/routable.d/accept-ra sudo || IF_CHANGED
    SUDO_CHMOD +x /etc/networkd-dispatcher/routable.d/accept-ra

  fi # end WAN interface

  # LAN interface via libvirt
  (
# Beware: Use \$ to get a literal $ in the output
cat <<EOS
#!/bin/bash
if [ "\$1" = "default" -a "\$2" = "started" ]; then
EOS
[ "${LAN_INTERFACE}" != "none" ] && cat <<EOS
  /sbin/ip link set $LAN_INTERFACE up
  # https://serverfault.com/questions/616485/e1000e-reset-adapter-unexpectedly-detected-hardware-unit-hang
  /sbin/ethtool -K $LAN_INTERFACE gso off gro off tso off
  /sbin/brctl addif virbr0 $LAN_INTERFACE
EOS
cat <<EOS
  sysctl net.ipv4.conf.virbr0.accept_redirects=0
  sysctl net.ipv4.conf.virbr0.send_redirects=0
  iptables -I FORWARD -j ACCEPT -s 100.64.0.0/10 -i virbr0
  iptables -I FORWARD -j ACCEPT -d 100.64.0.0/10 -o virbr0 -m conntrack --ctstate RELATED,ESTABLISHED
  iptables -t nat -I POSTROUTING -j RETURN -o virbr0
  iptables -t nat -A POSTROUTING -j MASQUERADE -s 100.64.0.0/10
  ip6tables -I FORWARD -j ACCEPT -i virbr0
  ip6tables -I FORWARD -j ACCEPT -o virbr0 -m conntrack --ctstate RELATED,ESTABLISHED
  ip6tables -t nat -I POSTROUTING -j RETURN -o virbr0
  ip6tables -t nat -A POSTROUTING -j MASQUERADE -s 2001:db8::/32
  ip6tables -t nat -A POSTROUTING -j MASQUERADE -s 2001:10::/28
  ip6tables -t nat -A POSTROUTING -j MASQUERADE -s fc00::/7
EOS
[ -n "${TRUSTED_EXTERNAL_NETWORK:-}" ] && cat <<EOS
  # Accept inbound from trusted source
  iptables -I FORWARD -s $TRUSTED_EXTERNAL_NETWORK -j ACCEPT
EOS
cat <<EOS
fi
EOS
  ) | REPLACE /etc/libvirt/hooks/network sudo || IF_CHANGED NETWORK_CHANGED="Y"
  SUDO_CHMOD +x /etc/libvirt/hooks/network
  SUDO_CHMOD -x /etc/libvirt/hooks/network.bak || true

  sudo mkdir -p /etc/systemd/system/systemd-networkd-wait-online.service.d
  (
cat <<EOS
[Service]
ExecStart=
ExecStart=/lib/systemd/systemd-networkd-wait-online --any --timeout=15
EOS
  ) | REPLACE /etc/systemd/system/systemd-networkd-wait-online.service.d/override.conf sudo || IF_CHANGED sudo systemctl daemon-reload || true
}

MODS="$MODS apt_cacher_ng"
conf_apt_cacher_ng () {
  sudo apt-get install -y apt-cacher-ng

  (
egrep -v '^(ConnectProto:|UseWrap:|# gns3setup)' /etc/apt-cacher-ng/acng.conf
cat <<EOS
# gns3setup
ConnectProto: v4
UseWrap: 1
EOS
  ) | REPLACE /etc/apt-cacher-ng/acng.conf sudo || IF_CHANGED
  (
egrep -v '^(apt-cacher-ng:|# gns3setup)' /etc/hosts.allow || true
cat <<EOS
# gns3setup
apt-cacher-ng: 127.0.0.1 10.0.0.0/8 100.64.0.0/10 172.16.0.0/12 192.0.2.0/24 192.168.0.0/16 [::1] [2001:db8::]/32
EOS
  ) | REPLACE /etc/hosts.allow sudo || IF_CHANGED

  (
egrep -v '^(apt-cacher-ng:|# gns3setup)' /etc/hosts.deny || true
cat <<EOS
# gns3setup
apt-cacher-ng: ALL
EOS
  ) | REPLACE /etc/hosts.deny sudo || IF_CHANGED

  (
cat <<EOS
# gns3setup
Acquire::http::Proxy "http://100.64.0.1:3142/";
Acquire::https::Proxy "DIRECT";
EOS
  ) | REPLACE /etc/apt/apt.conf.d/99proxy sudo || IF_CHANGED
}

MODS="$MODS gns3server"
conf_gns3server () {
  sudo debconf-set-selections << EOS
ubridge	ubridge/install-setuid	boolean	true
EOS
  sudo apt-get install -y gns3-server cpu-checker
  sudo apt-mark hold gns3-server
  sudo usermod -a -G ubridge "$USER"

  (
cat <<EOS
[Unit]
Description=GNS3 network simulator
After=network-online.target
Wants=network-online.target
Conflicts=shutdown.target

[Service]
User=%i
Restart=always
RestartSec=5
ExecStart=/usr/bin/gns3server
LimitNOFILE=16384

[Install]
WantedBy=multi-user.target
EOS
  ) | REPLACE /etc/systemd/system/gns3@.service sudo || IF_CHANGED
  sudo systemctl enable "gns3@$USER"

  sudo mkdir -p /var/lib/GNS3/images
  sudo chown -R "$USER":"$GROUP" /var/lib/GNS3/images

  # https://github.com/GNS3/gns3-server/blob/master/conf/gns3_server.conf
  mkdir -p "$HOME/.config/GNS3/2.2"
  (
cat <<EOS
[Server]
images_path = /var/lib/GNS3/images
host = 100.64.0.${IP_OFFSET}
EOS
if [ -n "${GNS3_AUTH:-}" ]; then
  echo "auth = ${GNS3_AUTH}"
elif ! egrep -m1 "^#?auth *=" "$HOME/.config/GNS3/2.2/gns3_server.conf" 2>/dev/null; then
  echo "auth = False"
fi
if [ -n "${GNS3_USERNAME:-}" ]; then
  echo "user = ${GNS3_USERNAME}"
elif ! egrep -m1 "^#?user *=" "$HOME/.config/GNS3/2.2/gns3_server.conf" 2>/dev/null; then
  echo "user = ${USER}"
fi
if [ -n "${GNS3_PASSWORD:-}" ]; then
  echo "password = ${GNS3_PASSWORD}"
elif ! egrep -m1 "^#?password *=" "$HOME/.config/GNS3/2.2/gns3_server.conf" 2>/dev/null; then
  echo "password = $(dd if=/dev/urandom bs=1 count=6 2>/dev/null | base64)"
fi
cat <<EOS

[Qemu]
enable_kvm = True
require_kvm = False
EOS
  ) | REPLACE "$HOME/.config/GNS3/2.2/gns3_server.conf" || IF_CHANGED
}

MODS="$MODS shellinabox"
conf_shellinabox () {
  # Hopefully this won't be needed for much longer:
  # https://github.com/GNS3/gns3-gui/issues/2883
  sudo apt-get install -y shellinabox
  curl -Ss https://raw.githubusercontent.com/nsrc-org/nsrc-gns3/main/gns3-shellinabox.py |
    REPLACE /usr/local/bin/gns3-shellinabox.py sudo || IF_CHANGED
  SUDO_CHMOD +x /usr/local/bin/gns3-shellinabox.py
  curl -Ss https://raw.githubusercontent.com/nsrc-org/nsrc-gns3/main/gns3-ssh.py |
    REPLACE /usr/local/bin/gns3-ssh.py sudo || IF_CHANGED
  SUDO_CHMOD +x /usr/local/bin/gns3-ssh.py

  (
egrep -v '^(SHELLINABOX_ARGS=|# gns3setup)' /etc/default/shellinabox
cat <<EOS
# gns3setup
SHELLINABOX_ARGS="--no-beep -t -s /:shellinabox:shellinabox:/var/tmp:/usr/local/bin/gns3-shellinabox.py -s '/ssh:shellinabox:shellinabox:/var/tmp:PYTHONIOENCODING=utf-8:replace /usr/local/bin/gns3-ssh.py'"
EOS
  ) | REPLACE /etc/default/shellinabox sudo || IF_CHANGED

  sudo systemctl enable shellinabox
}

MODS="$MODS gns3man"
conf_gns3man () {
  sudo apt-get install -y python3-guestfs apache2 apache2-suexec-pristine unzip
  sudo a2enmod cgi suexec userdir
  SUDO_CHMOD +r /boot/vmlinuz-*
  (
cat <<EOS
<Directory "/home/*/public_html/cgi-bin/">
    Options ExecCGI
    SetHandler cgi-script
</Directory>
EOS
  ) | REPLACE /etc/apache2/conf-enabled/usercgi.conf sudo || IF_CHANGED sudo systemctl restart apache2

  mkdir -p "$HOME/public_html/cgi-bin"
  curl -Ss https://raw.githubusercontent.com/nsrc-org/nsrc-gns3/main/gns3man | REPLACE "$HOME/public_html/cgi-bin/gns3man" || IF_CHANGED
  CHMOD 755 "$HOME/public_html/cgi-bin" "$HOME/public_html/cgi-bin/gns3man"
}

MODS="$MODS apache"
conf_apache () {
  sudo apt-get install -y apache2
  sudo mkdir -p /var/www/html/downloads /var/www/html/css
  sudo chown -R "$USER":"$GROUP" /var/www/html

  curl -Ss https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css |
    REPLACE /var/www/html/css/font-awesome.min.css sudo || IF_CHANGED
  curl -Ss https://cdnjs.cloudflare.com/ajax/libs/bulma/0.6.1/css/bulma.min.css |
    REPLACE /var/www/html/css/bulma.min.css sudo || IF_CHANGED

  # This page is aimed at the students.  But don't override any existing customized page.
  if grep "Apache2 Ubuntu Default Page: It works" /var/www/html/index.html >/dev/null; then
    (
cat <<EOS
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>WWW</title>
    <link rel="stylesheet" href="/css/font-awesome.min.css">
    <link rel="stylesheet" href="/css/bulma.min.css">
  </head>
  <body>

<section class="hero is-info">
  <div class="hero-body">
    <div class="container">
      <h1 class="title">
        NSRC Workshop Webserver
      </h1>
      <h2 class="subtitle">
        www.ws.nsrc.org
      </h2>
    </div>
  </div>
</section>

<section class="section">
<div class="container">
<aside class="menu">
  <p class="menu-label">
    Workshop Access on this Server
  </p>
  <ul class="menu-list">
        <li><a href="XXXX">LINK TO CURRENT WORKSHOP DIRECTORY</a></li>
	<li><a href=http://www.ws.nsrc.org/downloads/>Downloads</a></li>
        <li><a href=http://vtp.ws.nsrc.org:4200/>GNS3 Lab Console ports</a></li>
  </ul>
  <p class="menu-label">
    Links
  </p>
  <ul class="menu-list">
	<li><a href="https://nsrc.org/">NSRC Home</a></li>
	<li><a href="https://nsrc.org/workshops/">Archived workshops at NSRC</a></li>
  </ul>
</aside>
</div>
</section>

  </body>
</html>
EOS
    ) | REPLACE /var/www/html/index.html sudo || IF_CHANGED
  fi

  # This page is aimed at the instructor
  (
cat <<'EOS'
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>WWW</title>
    <link rel="stylesheet" href="/css/font-awesome.min.css">
    <link rel="stylesheet" href="/css/bulma.min.css">
  </head>
  <body>

<section class="hero is-info">
  <div class="hero-body">
    <div class="container">
      <h1 class="title">
        NSRC Virtualized Training Platform
      </h1>
      <h2 class="subtitle">
        vtp.ws.nsrc.org
      </h2>
    </div>
  </div>
</section>

<section class="section">
<div class="container">
<aside class="menu">
  <p class="menu-label">
    Documentation to run the Class
  </p>
  <ul class="menu-list">
	<li><a href="https://shell.nsrc.org/~vtp/gns3/docs/">GNS3 Training Platform</a></li>
	<li><a href="http://vtp.ws.nsrc.org:8384/">Syncthing</a></li>
	<li><a href="http://vtp.ws.nsrc.org:4200/">GNS3 Lab Consoles</a></li>
	<li><a href="http://vtp.ws.nsrc.org/~nsrc/cgi-bin/gns3man">Configuration Management</a></li>
	<li><a href="http://vtp.ws.nsrc.org:3080/static/web-ui/bundled">Experimental Web Interface for GNS3</a></li>
  </ul>
  <p class="menu-label">
    Links
  </p>
  <ul class="menu-list">
	<li><a href="http://noc.ws.nsrc.org/">Classroom NOC</a></li>
	<li><a href="http://vtp.ws.nsrc.org:19999/">NetData for the server</a></li>
  </ul>
</aside>
</div>
</section>

  </body>
</html>
}
EOS
  ) | REPLACE /var/www/html/nsrc.html sudo || IF_CHANGED
}

MODS="$MODS syncthing"
conf_syncthing() {
  sudo apt-get install -y syncthing

  sudo mkdir -p "/etc/systemd/system/syncthing@.service.d"
  (
cat <<EOS
[Service]
ExecStart=
ExecStart=/usr/bin/syncthing -no-browser -no-restart -logflags=0 -gui-address=100.64.0.${IP_OFFSET}:8384
EOS
  ) | REPLACE "/etc/systemd/system/syncthing@.service.d/override.conf" sudo || IF_CHANGED sudo systemctl daemon-reload || true

  sudo systemctl enable "syncthing@$USER" || true
}

MODS="$MODS netdata"
conf_netdata () {
  if [ -d /opt/netdata ]; then
    echo "Skipping netdata"
    return
  fi
  echo "Installing netdata..."
  bash <(curl -Ss https://my-netdata.io/kickstart-static64.sh) --accept --stable-channel
}

MODS="$MODS snmpd"
conf_snmpd () {
  sudo apt-get install -y snmpd libsnmp-dev

  # This makes snmpd less verbose in syslog
  sudo sed -i 's/-Lsd/-LSwd/' /etc/default/snmpd

  curl https://raw.githubusercontent.com/librenms/librenms-agent/master/snmp/distro |
    REPLACE /usr/bin/distro sudo || IF_CHANGED sudo chmod +x /usr/bin/distro

  (
cat <<'EOS'
#  Listen for connections on all interfaces (both IPv4 *and* IPv6)
agentAddress udp:161,udp6:161

# For SNMPv2: Configure Read-Only community and restrict who can connect
rocommunity   NetManage  127.0.0.1
rocommunity   NetManage  100.64.0.0/10
rocommunity6  NetManage  ::1
rocommunity6  NetManage  2001:db8::/32

# Information about this host
sysLocation    NSRC Network Management Workshop
sysContact     nsrc@gw.ws.nsrc.org

# Which OSI layers are active in this host
# (Application + End-to-End layers)
sysServices    72

# Include proprietary dskTable MIB (in addition to hrStorageTable)
includeAllDisks  10%

#Distro Detection for librenms
extend .1.3.6.1.4.1.2021.7890.1 distro /usr/bin/distro
EOS
  ) | REPLACE /etc/snmp/snmpd.conf sudo || IF_CHANGED

  sudo systemctl enable snmpd

  # Create SNMPv3 user
  if ! sudo grep "^rwuser admin" /usr/share/snmp/snmpd.conf; then
    sudo systemctl stop snmpd || true
    sleep 1
    sudo net-snmp-create-v3-user -X AES -a SHA -A NetManage admin || true
    sudo systemctl start snmpd || true
  fi
}

MODS="$MODS softflowd"
conf_softflowd () {
  sudo apt-get install -y softflowd
  (
cat <<'EOS'
#
# configuration for softflowd
#
# note: softflowd will not start without an interface configured.

# The interface softflowd listens on. You may also use "any" to listen
# on all interfaces.
INTERFACE="virbr0"

# Further options for softflowd, see "man softflowd" for details.
# You should at least define a host and a port where the accounting
# datagrams should be sent to, e.g.
OPTIONS="-n 100.64.0.250:9996 -v 9 -t maxlife=5m"
#OPTIONS="-n 100.64.0.249:2055 -v 9 -t maxlife=5m"
EOS
  ) | REPLACE /etc/default/softflowd sudo || IF_CHANGED

  (
cat <<'EOS'
[Unit]
Description=softflowd
After=network-online.target
Wants=network-online.target
Conflicts=shutdown.target

[Service]
EnvironmentFile=/etc/default/softflowd
ExecStart=/usr/sbin/softflowd -d -i $INTERFACE $OPTIONS
Restart=on-failure
RestartSec=5

[Install]
WantedBy=multi-user.target
EOS
  ) | REPLACE /etc/systemd/system/softflowd.service sudo || IF_CHANGED sudo systemctl daemon-reload || true

  sudo systemctl enable softflowd
}

MODS="$MODS node_exporter"
conf_node_exporter () {
  # prometheus-node-exporter in apt repository is old
  : "${NODE_EXPORTER_VERSION:=1.0.0}"

  if [ "${DRY_RUN:-N}" != "Y" -a ! -d "/opt/node_exporter-${NODE_EXPORTER_VERSION}.linux-amd64" ]; then
    curl -sSL "https://github.com/prometheus/node_exporter/releases/download/v${NODE_EXPORTER_VERSION}/node_exporter-${NODE_EXPORTER_VERSION}.linux-amd64.tar.gz" |
      sudo tar -C /opt -xvzf -
    sudo rm /opt/node_exporter || true
    sudo ln -s "node_exporter-${NODE_EXPORTER_VERSION}.linux-amd64" /opt/node_exporter
  fi

  (
cat <<'EOS'
[Unit]
Description=Prometheus Node Exporter
Documentation=https://github.com/prometheus/node_exporter
After=network-online.target

[Service]
User=root
EnvironmentFile=/etc/default/node_exporter
ExecStart=/opt/node_exporter/node_exporter $OPTIONS
Restart=on-failure
RestartSec=5

[Install]
WantedBy=multi-user.target
EOS
  ) | REPLACE /etc/systemd/system/node_exporter.service sudo || IF_CHANGED sudo systemctl daemon-reload || true

  (
cat <<'EOS'
OPTIONS='--collector.textfile.directory=/var/lib/node_exporter --collector.systemd --collector.processes --collector.interrupts --collector.powersupplyclass --collector.thermal_zone'
EOS
  ) | REPLACE /etc/default/node_exporter sudo || IF_CHANGED

  sudo mkdir -p /var/lib/node_exporter
  sudo systemctl enable node_exporter
}

###################################

for module in ${MODULES:-$MODS}; do
  echo "### Configuring $module ###"
  conf_$module
  echo
done

# Save network settings for next time
if [ ! -f gns3setup.conf ]; then
  (
cat <<EOS
LAN_INTERFACE="$LAN_INTERFACE"
WAN_INTERFACE="$WAN_INTERFACE"
EOS
[ "${IP_OFFSET}" != "1" ] && echo "IP_OFFSET=\"${IP_OFFSET}\""
[ -n "${TRUSTED_EXTERNAL_NETWORK:-}" ] && echo "TRUSTED_EXTERNAL_NETWORK=\"${TRUSTED_EXTERNAL_NETWORK}\""
[ -n "${IPV6_PREFIX:-}" ] && echo "IPV6_PREFIX=\"${IPV6_PREFIX}\""
true
  ) >gns3setup.conf
fi

echo "All done!"
egrep '^(user|password) *=' "$HOME/.config/GNS3/2.2/gns3_server.conf" || true

[ "${NETWORK_CHANGED:-}" = "Y" ] && cat <<EOS

########################################################
# Networking configuration has changed - please reboot #
########################################################

And don't forget to install an /etc/hosts file
EOS

if ! sudo kvm-ok >/dev/null 2>&1; then
cat <<EOS

WARNING: Your system does not appear to have KVM enabled.  Emulation will
be extremely slow!  Check your BIOS settings.
EOS
fi
